# 제네릭, 열거형

### 타입이 없을때의 문제점

1. 런타임 에러가 나기 쉽다.
2. IDE가 컴파일 에러를 미리 찾을 수 없다.
- <> 제네릭에 설정해서 IDE를 오류를 터트릴 수 있다. 확인할 수 있다

---

### 제네릭 (Generic)

- 타입을 나중에 원하는 형태로 정의할 수 있음
- 타입 안전 (type safe) 효과

List<E> class

- <E> element

Map<K,V> class

- <K, V> key, value

List list = [];

→  List<dynamic>

---

# enum

- 정해 둔 값만 넣어 둘 수 있는 타입

### 제네릭을 사용하지 않은 Pocket 클래스 (ver.1)

```dart
class Pocket {
  Object? _data;

  void put(Object data) {
    _data = data;

    Object? get() {
      return _data;
    }
  }
}
```

### 제네릭을 사용한 Pocket 클랙스 (ver. 2)

```dart
class Pocket<E> {
  E? _data;

  void put(E data) {
    _data = data;
  }

  E? get() {
    return _data;
  }
}
```

### 이용 가능한 타입에 제약을 추가한 Pocket 클래스 (ver. 3)

```dart
class Pocket<E extends Book> {
  E? _data;

  void put(E data) {
    _data = data;
  }

  E? get() {
    return _data;
  }
}
```

---

### 로그인 상태를 나타내는 상수를 정의한 예

```dart
class AuthState {
  static const authenticated = 1;
  static const unAuthenticated = 2;
  static const unKnown = 3;
}

// ...

  int authState = AuthState.unKnown;

  if (authState == AuthState.authenticated) {
    print('인증됨');
  } else if (authState == AuthState.unAuthenticated) {
    print('미인증');
  } else {
    print('알 수 없음');
  }
}
```

---

### enum을 정의하여 세 가지 상태로 제약을 건 코드

```dart
enum AuthState {
  authenticated,
  unAuthenticated,
  unKnown,

}

// ...

AuthState authState = AuthState.unKnown;

switch (authState) {
  case AuthState.authenticated;
    print('authenticated');
  case AuthState.unAuthenticated;
    print('unAuthenticated');
  case AuthState.unKnown;
    print('unKnown');
}

```

---